@model Carpet.Web.ViewModels.Administration.Orders.Delivery.Confirmed.Index.OrderDeliveryConfirmedIndexViewModel

@{
    ViewData["Title"] = "DeliveryConfirmed";
    var count = 1;
}

<div class="row">
    <div class="col-2">

        <a asp-action="Index">Back to List</a>


    </div>
    <div class="col-8">
        <h1 class="title text-center">ПОТВЪРДИ ПЛАЩАНЕ</h1>

    </div>
    <div class="col-2">
        <form asp-area="@GlobalConstants.AreaAdministrationName"
              asp-controller="@GlobalConstants.ContollerOrdersName"
              asp-action="@GlobalConstants.ActionDeliveryStartName">
            <input asp-for="Id" class="form-control" hidden />
            <div class="form-group text-right">
                <input type="submit" value="Confirmed Payment" class="btn btn-sm btn-outline-primary" />
            </div>
        </form>
        

    </div>
</div>
<p class="intro text-center" style="margin-top: 10px;"></p>

<h4 class="title text-center">За поръчка # @Model.Id / @(Model.CreatedOn.ToString("dd.MM.yyyy")) г.</h4>
<hr />
<div>
    <div class="row">
        <div class="col-7"> @*style="border:1px solid; vertical-align:middle;"*@
            <dl class="row" style="margin-top:8px;">
                <dt class="col-sm-4">
                    @Html.DisplayNameFor(model => model.Customer.FullName):
                </dt>
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.Customer.FullName)
                </dd>

                <dt class="col-sm-4">
                    @Html.DisplayNameFor(model => model.CreatedOn):
                </dt>
                <dd class="col-sm-8">
                    @Model.CreatedOn.ToString("dd.MM.yyyy") г.
                </dd>
                <dt class="col-sm-4">
                    @Html.DisplayNameFor(model => model.Customer.PickUpAddress):
                </dt>
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.Customer.PickUpAddress)
                </dd>
                <dt class="col-sm-4">
                    @Html.DisplayNameFor(model => model.Customer.DeliveryAddress):
                </dt>
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.Customer.DeliveryAddress)
                </dd>
            </dl>
        </div>
        <div class="col-5">
            <dl class="row">
                <dt class="col-sm-4">
                    @Html.DisplayNameFor(model => model.IsExpress):
                </dt>
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.IsExpress)
                </dd>
                <dt class="col-sm-4">
                    @Html.DisplayNameFor(model => model.HasFlavor):
                </dt>
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.HasFlavor)
                </dd>
                <dt class="col-sm-4">
                    @Html.DisplayNameFor(model => model.Description):
                </dt>
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.Description)
                </dd>

            </dl>

        </div>
    </div>
    <hr />

    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TotalItemQuantity):
        </dt>
        <dd class="col-sm-2">
            @Html.DisplayFor(model => model.TotalItemQuantity) бр.
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TotalArea):
        </dt>
        <dd class="col-sm-2">
            @Html.DisplayFor(model => model.TotalArea) кв. м.
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TotalOrderAmount):
        </dt>
        <dd class="col-sm-2">
            @Html.DisplayFor(model => model.TotalOrderAmount) лв.
        </dd>
    </dl>



</div>

<table class="table">
    <thead>
        <tr>
            <th>
                #
            </th>
            <th>
                @OrderConstants.DisplayNameItem
            </th>
            <th>
                @OrderConstants.DisplayNameWidth м.
            </th>
            <th>
                @OrderConstants.DisplayNameHeight м.
            </th>
            <th>
                @ItemConstants.DisplayNameArea кв. м.
            </th>
            <th>
                @ItemConstants.DisplayNameVacuumCleaningAddOnPrice
            </th>
            <th>
                @ItemConstants.DisplayNameTotalPrice лв.
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.OrderItems)
        {
            <tr>
                <td>
                    @(count++)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ItemWidth)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ItemHeight)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ItemArea)
                </td>
                <td>
                    @(item.HasVacuumCleaning == true ? GlobalConstants.YesString : GlobalConstants.NoString)
                </td>
                <td>
                    @{
                        var totalPrice = item.Item.OrdinaryPrice;
                        if (item.IsExpress) { totalPrice += item.Item.ExpressAddOnPrice; }
                        if (item.HasVacuumCleaning) { totalPrice += item.Item.VacuumCleaningAddOnPrice; }
                        if (item.HasFlavor) { totalPrice += item.Item.FlavorAddOnPrice; }
                        totalPrice *= item.ItemArea;
                        item.TotalPrice = totalPrice;
                    }
                    @Html.DisplayFor(modelItem => item.TotalPrice)

                </td>

            </tr>
        }
    </tbody>
</table>

